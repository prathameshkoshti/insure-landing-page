{"version":3,"sources":["images/logo.svg","images/image-intro-desktop.jpg","components/Footer.js","components/Button.js","components/Navbar.js","components/Banner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Footer","className","src","logo","alt","React","Component","Button","this","props","isNavButton","value","Navbar","Banner","desktopBanner","width","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uHAAAA,EAAOC,QAAU,IAA0B,kC,kBCA3CD,EAAOC,QAAU,IAA0B,iD,4MCiE5BC,E,iLA5Db,OACC,gCACC,yBAAKC,UAAU,kBACd,yBAAKA,UAAU,OAAOC,IAAKC,IAAMC,IAAI,KACrC,4BACC,4BAAI,uBAAGH,UAAU,kCACjB,4BAAI,uBAAGA,UAAU,0BACjB,4BAAI,uBAAGA,UAAU,4BACjB,4BAAI,uBAAGA,UAAU,8BAGnB,yBAAKA,UAAU,eACd,yBAAKA,UAAU,eACd,yBAAKA,UAAU,WAAf,eAGA,4BACC,2CACA,2CACA,0CACA,yCAGF,yBAAKA,UAAU,eACd,yBAAKA,UAAU,WAAf,WAGA,4BACC,mCACA,4CACA,8CACA,yCAGF,yBAAKA,UAAU,eACd,yBAAKA,UAAU,WAAf,WAGA,4BACC,qCACA,uCACA,2CAGF,yBAAKA,UAAU,eACd,yBAAKA,UAAU,WAAf,UAGA,4BACC,uCACA,qCACA,+C,GArDcI,IAAMC,WCSZC,E,iLARb,OACC,4BAAQN,UAAsC,QAA3BO,KAAKC,MAAMC,YAAwB,oBAAsB,UAC1EF,KAAKC,MAAME,W,GAJKN,IAAMC,WCkBZM,E,iLAdb,OACC,6BACC,yBAAKX,UAAU,OAAOC,IAAKC,IAAMC,IAAI,KACrC,4BACC,2CACA,oCACA,uCACA,4BAAI,kBAAC,EAAD,CAAQM,YAAY,MAAMC,MAAM,sB,GATpBN,IAAMC,W,gBCmBZO,E,iLAjBb,OACC,yBAAKZ,UAAU,UACd,yBAAKA,UAAU,WACd,0DACA,2NAGA,kBAAC,EAAD,CAAQU,MAAM,gBAEf,yBAAKV,UAAU,SACd,yBAAKC,IAAKY,IAAeV,IAAI,GAAGW,MAAM,gB,GAZtBV,IAAMC,W,MCYZU,MAVf,WACC,OACC,yBAAKf,UAAU,OACd,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCiBgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9d9defc2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.1bc452ac.svg\";","module.exports = __webpack_public_path__ + \"static/media/image-intro-desktop.8ac69ec7.jpg\";","import React from 'react'\nimport logo from '../images/logo.svg'\n\nclass Footer extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<footer>\n\t\t\t\t<div className=\"footer-heading\">\n\t\t\t\t\t<img className=\"logo\" src={logo} alt=\"\" />\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li><i className=\"fab fa-facebook-square fa-lg\"></i></li>\n\t\t\t\t\t\t<li><i className=\"fab fa-twitter fa-lg\"></i></li>\n\t\t\t\t\t\t<li><i className=\"fab fa-pinterest fa-lg\"></i></li>\n\t\t\t\t\t\t<li><i className=\"fab fa-instagram fa-lg\"></i></li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"footer-body\">\n\t\t\t\t\t<div className=\"footer-item\">\n\t\t\t\t\t\t<div className=\"heading\">\n\t\t\t\t\t\t\tour company\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>How we work</li>\n\t\t\t\t\t\t\t<li>Why insure?</li>\n\t\t\t\t\t\t\t<li>view plans</li>\n\t\t\t\t\t\t\t<li>reviews</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"footer-item\">\n\t\t\t\t\t\t<div className=\"heading\">\n\t\t\t\t\t\t\tHelp me\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>FAQ</li>\n\t\t\t\t\t\t\t<li>Terms of use</li>\n\t\t\t\t\t\t\t<li>privacy policy</li>\n\t\t\t\t\t\t\t<li>cookies</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"footer-item\">\n\t\t\t\t\t\t<div className=\"heading\">\n\t\t\t\t\t\t\tContact\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>Sales</li>\n\t\t\t\t\t\t\t<li>Support</li>\n\t\t\t\t\t\t\t<li>live chat</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"footer-item\">\n\t\t\t\t\t\t<div className=\"heading\">\n\t\t\t\t\t\t\tothers\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>careers</li>\n\t\t\t\t\t\t\t<li>Press</li>\n\t\t\t\t\t\t\t<li>License</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</footer>\n\t\t)\n\t}\n}\n\nexport default Footer;","import React from 'react';\n\nclass Button extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<button className={this.props.isNavButton === 'yes' ? 'button nav-button' : 'button'}>\n\t\t\t\t{this.props.value}\n\t\t\t</button>\n\t\t)\n\t}\n}\n\nexport default Button;","import React from 'react';\nimport Button from './Button';\nimport logo from '../images/logo.svg'\n\nclass Navbar extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<nav>\n\t\t\t\t<img className=\"logo\" src={logo} alt=\"\" />\n\t\t\t\t<ul>\n\t\t\t\t\t<li>How we work</li>\n\t\t\t\t\t<li>Blog</li>\n\t\t\t\t\t<li>Account</li>\n\t\t\t\t\t<li><Button isNavButton=\"yes\" value=\"View Plans\" /></li>\n\t\t\t\t</ul>\n\t\t\t</nav>\n\t\t)\n\t}\n}\n\nexport default Navbar;","import React from 'react';\nimport Button from './Button';\nimport desktopBanner from '../images/image-intro-desktop.jpg'\n\nclass Banner extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"banner\">\n\t\t\t\t<div className=\"content\">\n\t\t\t\t\t<h1>Humanizing your insurance.</h1>\n\t\t\t\t\t<p>Get your life insurance coverage easier and faster. We blend our expertise\n\tand technology to help you find the plan thatâ€™s right for you. Ensure you\n\tand your loved ones are protected.</p>\n\t\t\t\t\t<Button value=\"view plans\" />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"image\">\n\t\t\t\t\t<img src={desktopBanner} alt=\"\" width=\"540px\" />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Banner;","import React from 'react';\nimport Footer from './components/Footer';\nimport Navbar from './components/Navbar';\nimport Banner from './components/Banner';\nimport './App.css';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<Navbar />\n\t\t\t<Banner />\n\t\t\t<Footer />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}